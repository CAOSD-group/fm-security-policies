Traduccion de reglas y politicas de seguridad k8s a uvl::

Politicas y reglas obtenidas de herramientas externas.


Descripcion del objetivo:

Este proyecto tiene como objetivo unificar las reglas de seguridad estática utilizadas en Kubernetes (provenientes de herramientas como Kyverno, Checkov, Trivy o las recomendaciones del CIS Benchmark) en un modelo declarativo común basado en UVL (Universal Validation Language).

La validación se realiza de forma estática, sobre manifiestos YAML de Kubernetes antes del despliegue, utilizando los JSON Schemas oficiales de Kubernetes como referencia estructural:
https://github.com/yannh/kubernetes-json-schema

Objetivo principal:
Establecer un catálogo de constraints en UVL que contengan comprobaciones de seguridad usados por las principales herramientas externas y de análisis estático.

Traducir reglas existentes (Kyverno, CIS Benchmark, Checkov) a UVL para facilitar su evaluación unificada.


Alcance actual:

Modelado estático de objetos Kubernetes (Pod, Deployment, Role, etc.)

Traducción manual y estructurada de reglas de seguridad a constraints en UVL

Estructura organizada por dominio: seguridad de contenedores, RBAC, redes, volúmenes, etc.

Herramienta	Formato	Ubicación	Comentario

OPA / Gatekeeper	Rego (lógica declarativa)	GitHub: https://github.com/open-policy-agent/gatekeeper-library, organizadas por categoría
Kyverno	YAML,	https://github.com/kyverno/policies	Muy legibles y reutilizables
Kubescape	JSON Schema / Control Definitions,	https://github.com/kubescape/kubescape	Basadas en frameworks como NSA, MITRE
Trivy	Parcial (para IaC)	JSON/YAML	Trivy misconfiguration policies	Muy útiles para YAML y Terraform
Checkov	Python (reglas personalizadas) / JSON	Checkov policies	Bien documentadas, pero más técnicas
Kube-bench	YAML por sección (CIS Benchmark), https://github.com/aquasecurity/kube-bench/tree/main/cfg	Basadas en estándares oficiales





Enlaces relevantes de politicas de seguridad:
https://kyverno.io/policies/?policytypes=validate
https://cloud.google.com/kubernetes-engine/enterprise/policy-controller/docs/how-to/using-nsa-cisa-k8s-v1.2?hl=es-419
https://media.defense.gov/2022/Aug/29/2003066362/-1/-1/0/CTR_KUBERNETES_HARDENING_GUIDANCE_1.2_20220829.PDF

https://open-policy-agent.github.io/gatekeeper-library/website/pspintro
https://open-policy-agent.github.io/gatekeeper-library/website/validation/privileged-containers/
Concuerdan politicas:
5.2.2 Minimize the admission of privileged containers (Manual)
https://kyverno.io/policies/pod-security/restricted/require-run-as-nonroot/require-run-as-nonroot/

  !io_k8s_api_core_v1_Pod_spec_containers_securityContext_privileged

  io_k8s_api_core_v1_Pod_spec_containers_securityContext_privileged == false


Politicas kyverno revisadas:
https://kyverno.io/policies/?policytypes=validate
https://kyverno.io/policies/pod-security/restricted/require-run-as-nonroot/require-run-as-nonroot/
https://kyverno.io/policies/pod-security/restricted/require-run-as-non-root-user/require-run-as-non-root-user/
https://kyverno.io/policies/pod-security-cel/restricted/require-run-as-non-root-user/require-run-as-non-root-user/
https://kyverno.io/policies/pod-security/baseline/disallow-privileged-containers/disallow-privileged-containers/


Fases:

1º Buscar politicas y reglas estaticas definidias en herramientas externas...

2º Traducir de manera manual(?) las politicas a uvl para agregar al conjunto de restricciones

3º Realizar validaciones estaticas con estas politicas en los modelos "fragmentados"

4º Comparar % de "admision"/validacion frente a las otras tools. Se supone que al completar seria mas restrictiva
pero no se si se podrian traducir todas las reglas en completitud.

5º Completar el analisis con la comprobacion del despligue con tools en tiempo de ejecucion?



Re 2º:
Se debe de realizar el modelado de las politicas como un fm para definir las politicas y poder traducir/usar las comprobaciones de las politicas en el modelo...


https://github.com/kyverno/policies/tree/main/pod-security/baseline
equivalente a 
https://kyverno.io/policies/?policytypes=Pod%2520Security%2520Standards%2520%28Baseline%29


Terminar la comparación entre modelos -- Restricciones



**** Revision CRD-Politicas de los YAMLs
En el index de la Api del CRD de la definicion de las politicas falta contenido? En el punto ded definir las condiciones de la politica solo se muestra como una lista
y se puede comprobar que se definen varias propiedades mas dentro de esta condicion...


Segun la defincion del CRD creo que no deberia de ser valida (en uvl) -- Creo que se usa Go para analizar y comprobar las condiciones insertadas en el Yaml pero no se
definen las propiedades necesarias en el CRD. Para uvl seria invalida la config al usar propiedades que no se tienen en la version
url del yaml de ejemplo:
https://github.com/kyverno/policies/blob/main/pod-security/baseline/disallow-capabilities/disallow-capabilities.yaml
        deny: (ref: https://htmlpreview.github.io/?https://github.com/kyverno/kyverno/blob/main/docs/user/crd/index.html#kyverno.io/v1.Deny)
          conditions: (ref: https://htmlpreview.github.io/?https://github.com/kyverno/kyverno/blob/main/docs/user/crd/index.html#kyverno.io/v1.ConditionsWrapper)
            all:
            - key: "{{ request.object.spec.[ephemeralContainers, initContainers, containers][].securityContext.capabilities.add[] }}"
              operator: AnyNotIn
              value:
              - AUDIT_WRITE
              - CHOWN
              - DAC_OVERRIDE
              - FOWNER
              - FSETID
              - KILL
              - MKNOD
              - NET_BIND_SERVICE
              - SETFCAP
              - SETGID
              - SETPCAP
              - SETUID
              - SYS_CHROOT


CRDs de donde se obtendran el mapeo de los esquemas de la defincion de la variabilidad kyverno...
https://github.com/kyverno/kyverno/tree/main/config/crds
Se diferencia entre el CRD y las politicas de Kyverno.

Primer YAML a probar:
https://github.com/kyverno/kyverno/blob/main/config/crds/kyverno/kyverno.io_clusterpolicies.yaml

Se tratara de desarrollar un script para mapear automaticamente la definicion de los YAML para obtener
el fm de dichos schemas


